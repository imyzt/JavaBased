package top.imyzt.itcase.day13;
/** 
 * @author 杨镇涛
 * @date 2018年4月12日 下午1:49:23 
 * @version 1.0 
 * @Description 选择排序
 */
public class Sort {
	public static void main(String[] args) {
		int len = 1000;
		int arr1[] = new int[len], arr2[] = new int[len];
		for (int i = 0; i < len; i++) {
			arr1[i] = (int) (Math.random() * 100) + 1;
			arr2[i] = (int) (Math.random() * 100) + 1;
		}
		int[] ccc = {45,56,70,5,67,24,63,17,3,23,58,67,60,38,25,20,53,67,25,35,34,51,8,77,46,81,74,38,21,91,14,100,61,12,17,22,5,59,2,27,47,56,19,34,63,48,34,48,78,26,68,2,52,78,86,40,89,54,33,44,95,78,67,75,26,72,54,76,17,70,96,39,76,18,25,62,79,15,90,21,13,22,100,51,47,52,15,11,19,19,93,56,78,99,38,72,28,47,6,25,37,54,53,27,39,61,51,51,19,45,99,5,59,42,94,77,14,95,54,10,6,18,97,40,77,28,28,54,44,76,82,3,34,87,22,6,90,93,94,29,95,2,93,6,36,57,84,55,10,63,80,98,51,2,86,92,20,43,41,22,100,34,29,26,64,31,47,34,40,82,29,60,70,10,89,77,33,20,17,42,4,49,42,83,37,31,56,38,17,38,43,29,13,35,85,94,26,33,19,17,9,59,59,39,9,54,39,16,64,78,11,82,37,83,14,19,88,81,6,45,5,19,12,72,55,28,33,94,13,35,31,11,83,21,71,100,39,89,85,73,19,64,2,5,68,39,44,14,13,48,98,17,9,11,91,4,99,11,52,3,64,67,29,26,63,34,86,19,94,36,10,53,19,11,100,36,31,36,15,31,68,43,2,1,89,60,42,32,76,23,71,92,21,61,66,27,20,36,14,16,73,90,94,18,65,45,44,94,87,39,89,88,3,7,55,90,96,36,1,23,24,58,26,29,79,46,57,39,49,41,8,57,94,23,65,88,99,99,52,95,77,68,69,68,20,2,15,26,26,37,25,4,46,58,6,81,38,55,28,51,20,41,15,62,42,85,50,51,48,4,73,59,76,96,45,15,22,26,6,4,69,90,53,69,61,24,11,18,61,27,72,15,31,9,30,100,27,6,36,56,84,3,47,7,47,53,52,42,66,5,82,72,68,57,54,79,55,15,5,16,22,10,3,54,65,3,49,1,37,4,12,26,73,48,50,71,89,32,20,33,22,3,71,39,66,36,80,67,40,50,66,62,62,65,6,63,39,71,25,52,85,84,33,55,32,4,52,91,97,87,28,43,17,26,35,75,64,64,22,39,98,17,44,51,42,68,93,12,58,49,14,4,72,42,64,13,76,53,68,23,11,43,58,7,99,19,18,12,71,23,61,80,43,70,8,99,93,16,54,48,70,68,36,76,30,69,41,49,79,98,12,37,71,91,47,38,78,73,1,52,61,39,24,54,70,34,6,35,76,23,12,1,16,58,24,53,85,54,17,95,21,63,50,27,66,99,42,32,90,31,57,68,20,89,31,11,8,9,11,13,26,34,75,84,86,46,77,95,99,86,22,68,43,1,55,7,94,9,51,71,44,84,100,7,5,100,56,85,73,75,80,12,14,17,89,100,72,66,15,36,35,58,8,73,100,92,56,19,10,45,95,27,75,81,43,91,93,56,73,4,25,89,4,36,93,74,91,40,18,55,30,90,1,71,12,6,17,48,93,34,80,11,67,64,1,27,48,25,38,1,15,84,13,94,63,23,55,40,64,91,76,63,41,51,7,34,99,60,36,18,73,55,37,100,77,41,73,89,79,96,20,36,22,42,39,21,77,44,85,89,87,36,61,52,46,100,17,71,24,23,76,89,19,21,27,91,13,15,29,100,55,77,2,33,98,92,99,89,60,6,10,33,92,59,97,98,77,4,5,21,79,85,79,90,24,11,73,58,87,48,46,57,7,32,78,26,63,50,48,11,74,59,55,31,13,46,78,98,49,23,3,45,48,41,72,94,7,44,18,67,94,3,96,32,26,16,33,24,4,38,45,98,81,95,98,85,42,90,16,71,17,11,58,24,62,92,10,24,62,85,83,86,61,52,97,66,19,82,91,9,32,89,7,60,97,52,17,52,80,93,98,62,29,17,84,66,49,50,38,52,15,48,20,81,4,80,65,82,60,80,69,40,32,45,66,7,45,19,49,37,94,72,34,42,75,95,16,7,88,40,37,6,73,98,65,26,76,83,70,80,48,63,31,57,18,64,21,58,7,37,41,3,65,57,17,17,47,98,62,15,65,4,84,69,81,53,88,100,25,78,87,42,52,89,42,82,83,22,86,39,77,4,4,75,44,99,68,24,85,88,54,96,23,3,99,87,74,89,52,94,44,99,51,40,72,24,19,26,57,18,51,91,19,76,63,36,6,68,96,41,34,38,8,90,15,21,1,68,28,45,61,14,27,7,9,32,89,47,85,89,56,71,29,66,11,72,14,37,100,63};
		/*
		 * {3   277 1222  71  1};
		 * {3  71  1222  277  77};
		 * {3  71  77  277  1222};
		 * 
		 * 
		 */
		for (int i = 0; i < 1000; i++) {
			ccc[i] = 1000-i;
		}
		select(ccc);
		bubble(ccc);
		System.out.println();
		choose();
	}

	/**
	 * 选择排序
	 * @param arr
	 */
	private static void select(int[] arr) {
		int compare = 0;
		int sawp = 0;
		for (int i = 0; i < arr.length - 1; i++) {
			int index = i;
			for (int j = i + 1; j < arr.length; j++) {		//j=i+1,不和自己比较
				++compare;
				if (arr[index] > arr[j]) {					//如果当前下标的数字大于被比较的下标的数字
					index = j;								//将被比较下标的数字(小的)的下标给当前 下标
				}
			}
			if (i != index) {								//比较完成后,如果当前比较数字下标发生了改变,交换两个数字的下标,得出当前循环最小数放在最前
				++ sawp;
				int temp = arr[i];
				arr[i] = arr[index];
				arr[index] = temp;
			}
		}

		System.out.println("select比较了 : "+compare + "次,交换了:" + sawp + "次");
		for (int i : arr) {
			System.out.print(i + ",");
		}

	}
	/**
	 * 冒泡排序
	 * @param arr
	 */
	private static void bubble(int[] arr) {

		/**
		 * 冒泡排序
		 * 轻的往上,重的往后
		 * 外层for循环定义比较次数,每一次比较到最后一位元素已经是最大值了,故不需要比较最后一位.比较arr.length - 1次即可
		 * 内层for循环定义比较当前数组长度之间的比较次数  arr.length - 1 - i,-1是防止数组越界,-i是为了提高效率,不需要比较外层for循环已经比较过的数
		 * 
		 */

		int count = 0;
		for (int i = 0; i < arr.length -1; i++) {
			for (int j = 0; j < arr.length - 1 - i; j++) {
				
				if (arr[j] > arr[j + 1]) {
					++count;
					int temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
			}
		}
		System.out.println("\nbubble比较了 : "+count + "次");
		for (int i : arr) {
			System.out.print(i + " ");
		}
	}
	
	
	
	
	
	
	
	
	
	
	private static void choose() {
		int arr[] = {1,2,3,45,56,6,67,7,78,7,6,56,4,4,3,2,12,23,2,2,3,3,34,4,44};
		for (int i = 0; i < arr.length - 1; i++) {								//arr.length - 1:最后一个不用比较
			int index = i;														//将比较数的下标记录下来
			for (int j = i + 1; j < arr.length; j++) {							//j = i + 1:不需要和自己比较
				/*
				 * 第一次比较arr[0] 是否大于 arr[0+1],如果成立:index = j -> 将arr[0+1](小的)的下标给index,然后继续循环
				 * 后面的比较arr[index] 是否大于 arr[i+1],如果成立继续将小的的下标给index,使后续的比较操作都是使用的最小的比较接下来的数字
				 */
				if (arr[index] > arr[j]) {										
					index = j;
				}
			}
			if (index != i) {													//如果一次循环走完,index的值改变了,就交换当前数和arr[index](最小值)的位置.是最小值在最前方
				int temp = arr[index];
				arr[index] = arr[i];
				arr[i] = temp;
			}
		}
		for (int i : arr) {
			System.out.print(i + ",");
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
